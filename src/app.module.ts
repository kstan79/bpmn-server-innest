/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2023-10-28
 * Author: Ks Tan
 */
 
import { Module, MiddlewareConsumer, NestModule, Provider } from '@nestjs/common';
import { MongooseModule,MongooseModuleOptions } from '@nestjs/mongoose';
import { APP_GUARD,APP_INTERCEPTOR,APP_FILTER } from '@nestjs/core';
import { ResponseInterceptor } from './simpleapp/generate/commons/interceptors/response.interceptor'
import {
  AuthGuard,
  KeycloakConnectModule,
  ResourceGuard,
  TokenValidation,
  RoleGuard,
  PolicyEnforcementMode,
} from 'nest-keycloak-connect';
import {RolesGuard} from './simpleapp/generate/commons/roles/roles.guard'
import { ConfigModule } from '@nestjs/config';
import { ServeStaticModule } from '@nestjs/serve-static';
import { join } from 'path';
import { TenantMiddleware } from './simpleapp/generate/commons/middlewares/tenant.middleware';
import { AppController } from './app.controller';
import { AppService } from './app.service';
import {GenerateModule} from './simpleapp/simpleapp.module'
import { UserMongoSchema } from './simpleapp/generate/models/user.model';
import { PermissionMongoSchema } from './simpleapp/generate/models/perm.model';
import { ApiEventMongoSchema } from './simpleapp/generate/models/apievent.model';
import { EventEmitterModule } from '@nestjs/event-emitter';


const providers:Provider[] = [AppService,  {
  provide: APP_INTERCEPTOR,
  useClass: ResponseInterceptor,
},]
if(process.env.OAUTH2_CONFIGURL){
  providers.push( {provide: APP_GUARD,useClass: AuthGuard,})
  providers.push( {provide: APP_GUARD,useClass: ResourceGuard,})
  providers.push( {provide: APP_GUARD,useClass: RolesGuard,})
}

  
@Module({
  
  imports: [
    ConfigModule.forRoot(),
    EventEmitterModule.forRoot({
  // set this to `true` to use wildcards
  wildcard: false,
  // the delimiter used to segment namespaces
  delimiter: '.',
  // set this to `true` if you want to emit the newListener event
  newListener: false,
  // set this to `true` if you want to emit the removeListener event
  removeListener: false,
  // the maximum amount of listeners that can be assigned to an event
  maxListeners: 10,
  // show event name in memory leak message when more than maximum amount of listeners is assigned
  verboseMemoryLeak: false,
  // disable throwing uncaughtException if an error event is emitted and it has no listeners
  ignoreErrors: false,
}),
    MongooseModule.forRoot(process.env.MONGO_DB_URL,{}),
    ServeStaticModule.forRoot({
      rootPath: join(__dirname, '..', 'public_html'),
      exclude: ['/api/(.*)'],
    }),
    KeycloakConnectModule.register({
      authServerUrl: process.env.OAUTH2_BASEURL,
      realm: process.env.OAUTH2_REALM,
      clientId: process.env.OAUTH2_CLIENTID,
      secret: process.env.OAUTH2_CLIENTSECRET,
      policyEnforcement: PolicyEnforcementMode.PERMISSIVE,
      tokenValidation: TokenValidation.ONLINE,
    }),
    GenerateModule,    
    MongooseModule.forFeature([
      { name: 'User', schema: UserMongoSchema },
      { name: 'Permission', schema: PermissionMongoSchema },
      { name: 'ApiEvent', schema: ApiEventMongoSchema },
    ]),    
      ],
  controllers: [AppController],
  providers: providers,       
})
export class AppModule implements NestModule {
  configure(consumer: MiddlewareConsumer) {
    consumer
      .apply(TenantMiddleware)
      .exclude('/api-yaml')
      .exclude('/api-json')
      .exclude('/api')
      .forRoutes('*');
  }
}
