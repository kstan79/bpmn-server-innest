/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-02-23
 * Author: Ks Tan
 */
import {
  Controller,
  Get,
  Put,
  Post,
  Patch,
  Delete,
  Body,
  Query,
  Param,
  Type,
  Res,
  HttpStatus,
  Inject,
  Injectable,
  Scope,
  Req,
  HttpException,
  Request,
  Logger,
} from '@nestjs/common';
import { Roles } from '../generate/commons/roles/roles.decorator';
import { Role } from '../generate/commons/roles/roles.enum';
import { ApiTags, ApiBody, ApiResponse, ApiOperation } from '@nestjs/swagger';
import { UserContext } from '../generate/commons/user.context';
import { ProfileService } from './profile.service';
import { AppUser } from '../generate/commons/decorators/appuser.decorator';
import { RegTenant } from './profile.types';
import { RegTenantApiSchema, MyProfileApiSchema } from './profile.apischema';
@ApiTags('PROFILE')
@Controller('/profile')
export class ProfileController {
  protected logger = new Logger();
  constructor(private profileservice: ProfileService) {
    //console.log("init Profile Controller ")
  }

  @Get()
  @Roles(Role.Everyone, Role.User)
  @ApiOperation({
    operationId: 'getProfile',
    description: 'Get current user profile',
  })
  @ApiResponse({
    status: 200,
    type: () => MyProfileApiSchema,
    description: 'Success',
  })
  @ApiResponse({ status: 401, type: Object, description: 'Undefine profile' })
  async getProfile(@AppUser() appuser: UserContext) {
    this.logger.debug(
      `access getProfile API by ${appuser.getUid()},(${appuser.getId()})`,
    );
    const result = await this.profileservice.getProfile(appuser);
    this.logger.debug('getProfile result is:');
    this.logger.debug(result);
    if (result) {
      return result;
    } else {
      throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);
    }
  }

  @Get('session')
  @Roles(Role.Everyone, Role.User)
  @ApiOperation({
    operationId: 'getSession',
    description: 'Get current user session',
  })
  @ApiResponse({
    status: 200,
    type: () => String,
    description: 'Success',
  })
  @ApiResponse({ status: 401, type: Object, description: 'Expired' })
  async getSession(@AppUser() appuser: UserContext) {
    const result = await this.profileservice.getSession(appuser);
    if (result) {
      return result;
    } else {
      throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);
    }
  }

  @Get('/tenants')
  @Roles(Role.Everyone, Role.User)
  @ApiOperation({
    operationId: 'getAllTenants',
    description: 'Get all tenants',
  })
  @ApiResponse({
    status: 200,
    type: () => [MyProfileApiSchema],
    description: 'Success',
  })
  @ApiResponse({ status: 401, type: Object, description: 'Undefine profile' })
  async getAllTenants(@AppUser() appuser: UserContext) {
    this.logger.debug(
      `access getAllTenants API by ${appuser.getUid()},(${appuser.getId()})`,
    );
    const result = await this.profileservice.getAllTenants(appuser);
    this.logger.debug('getProfile result is:');
    this.logger.debug(result);
    if (result) {
      return result;
    } else {
      throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);
    }
  }

  @Post('/tenant')
  @Roles(Role.Everyone)
  @ApiBody({ description: 'create tenant name', type: RegTenantApiSchema })
  @ApiOperation({
    operationId: 'createTenant',
    description: 'create new tenant',
  })
  @ApiResponse({ status: 201, type: Object, description: 'Success' })
  async createTenant(
    @AppUser() appuser: UserContext,
    @Body('tenantName') tenantName: string,
  ) {
    const result = await this.profileservice.createTenant(appuser, tenantName);
    if (result) {
      return result;
    } else {
      throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);
    }
  }

  @Post('/invitation/:id/:decision')
  @Roles(Role.Everyone)
  @ApiOperation({
    operationId: 'decideInvitation',
    description: 'accept or reject invitation to tenant',
  })
  @ApiResponse({ status: 201, type: Object, description: 'Success' })
  async decideInvitation(
    @AppUser() appuser: UserContext,
    @Param('id') id: string,
    @Param('decision') decision: string,
  ) {
    const result = await this.profileservice.decideInvitation(
      appuser,
      id,
      decision,
    );
    if (result) {
      return result;
    } else {
      throw new HttpException('Forbidden', HttpStatus.FORBIDDEN);
    }
  }
}
