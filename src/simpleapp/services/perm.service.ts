/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-02-23
 * Author: Ks Tan
 */
import { InjectModel } from '@nestjs/mongoose';
import { Model, PipelineStage } from 'mongoose';
import { Injectable, InternalServerErrorException } from '@nestjs/common';
import { PermissionProcessor } from '../generate/processors/perm.processor';
import * as types from '../generate/types';
import { UserContext } from '../generate/commons/user.context';
export { Permission } from '../generate/types';

@Injectable()
export class PermissionService extends PermissionProcessor {
  protected strictIsolation = false;
  protected hooks: types.PermissionHooks = {};
  constructor(@InjectModel('Permission') mydoc: Model<types.Permission>) {
    super(mydoc);
  }

  async runListUser(appuser: UserContext) {
    const getallrecords: PipelineStage = { $match: {} };
    const lookupuser: PipelineStage = {
      $lookup: {
        from: 'user',
        localField: 'uid',
        foreignField: 'uid',
        as: 'user',
      },
    };
    const pipeline: PipelineStage[] = [getallrecords, lookupuser];
    const result = await this.aggregate(appuser, pipeline);
    const finalresult: any[] = [];
    for (let i = 0; i < result.length; i++) {
      const r = result[i];

      const u = r.user[0] ?? { email: 'unknownemail', fullName: 'unknown' };
      finalresult.push({
        _id: r._id,
        tenantId: r.tenantId,
        orgId: r.orgId,
        branchId: r.branchId,
        uid: r.uid,
        group: r.group,
        fullName: u.fullname,
        email: u.email,
      });
    }
    // result['user'] = result['users'][0]
    // delete result['users'][0]
    return finalresult;
  }
}
