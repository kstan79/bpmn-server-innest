/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-02-23
 * Author: Ks Tan
 */
import { Inject, Injectable } from '@nestjs/common';
import { IUserService, BPMNServer } from 'bpmn-server';
const mongoose = require('mongoose');

let myuserservice;
@Injectable()
export class WorkflowUserService implements IUserService {
  static initialized = false;
  server: BPMNServer;
  constructor() {
    // if (UserService.initialized)
    // 	return;

    // UserService.initialized = true;
    setImmediate(() => {
      this.init();
    });
  }
  setServer(server: BPMNServer) {
    this.server = server;
    myuserservice = this;
    return myuserservice;
    // this.server =server
  }
  async findUsers(query) {
    // return await User.find(query);
  }
  async findUser(query) {
    // return await User.findOne(query);
  }
  async addUser(userName, email, password, userGroups) {
    // 	let exist = await User.findOne({ userName: userName });
    // 	if (exist) {
    // 		console.log(`user '${userName}' already exists`);
    // 		return exist;
  }
  // 	exist = await User.findOne({ email: email });
  // 	if (exist) {
  // 		console.log("user already exists with this email", email);
  // 		return exist;
  // 	}

  // 	const user = new User({
  // 		userName, email, password, userGroups
  // 	});

  // 	await user.save();
  // 	return user;
  // }
  async setPassword(userName, password) {
    // let user = await User.findOne({ userName });
    // if (!user) {
    // 	console.log("User does not exist")
    // 	return;
    // }
    // user.password = password;
    // await user.save();
  }
  async install() {
    // 	console.log(` adding new User for 'admin'  password: 'admin'`);
    // 	//await this.init();
    // 	await this.addUser('admin', 'admin@mySite.com', 'admin', ['ADMIN']);
  }

  init() {
    console.log('UserService.init()');
    // 	dotenv.config();
    // 	console.log("MongoDB URL", process.env.MONGO_DB_URL)
    // 	mongoose.set('strictQuery', false);
    // 	mongoose.connect(process.env.MONGO_DB_URL);
    // 	mongoose.connection.on('error', (err) => {
    // 		console.error(err);
    // 		console.log('%s MongoDB connection error. Please make sure MongoDB is running.');
    // 		process.exit();
    // 	});
  }
}
