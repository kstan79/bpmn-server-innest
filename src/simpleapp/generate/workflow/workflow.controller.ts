/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-04-15
 * Author: Ks Tan
 */
import {
  Controller,
  Get,
  Post,
  Req,
  Put,
  Param,
  Body,
  Delete,
  HttpCode,
} from '@nestjs/common';

import { WorkflowService } from './workflow.service';
import { UserTaskActors } from './workflow.type';
import { Roles } from '../commons/roles/roles.decorator';
import { Role } from '../commons/roles/roles.enum';
import {
  WorkflowDataApiSchema,
  WorkflowProcessApiSchema,
  SearchWorkflowProcessApiSchema,
  UserTaskActorsApiSchema,
  UserTaskApiSchema,
} from './workflow.apischema';
import { ApiTags, ApiBody, ApiResponse, ApiOperation } from '@nestjs/swagger';
import { AppUser } from '../commons/decorators/appuser.decorator';
import { UserContext } from '../commons/user.context';
import { WorkflowName } from '../types';
@ApiTags('workflow')
@Controller('workflow')
export class WorkflowController {
  constructor(private readonly workflowService: WorkflowService) {}

  /********************* workflow user task begin ***********************/

  /**
   * get all user task under me, which base on assignee, candidateUsers, candidateGroup
   * @param appuser
   * @returns
   */
  @Get('/')
  @ApiOperation({
    operationId: 'getMyUserTask',
    description:
      'get all my active user task in this tenant **not yet complete**',
  })
  @ApiResponse({
    status: 200,
    type: [UserTaskApiSchema],
    description: 'usertask id not found, or not in waiting stage',
  })
  async getMyUserTask(@AppUser() appuser: UserContext) {
    return await this.workflowService.getMyUserTask(appuser);
  }
  /**
   * get all user task under me, which base on assignee, candidateUsers, candidateGroup
   * @param appuser
   * @returns
   */
  @Get('/actor/:uid')
  @ApiOperation({
    operationId: 'getActorUserTask',
    description:
      'get all my active user task in this tenant **not yet complete**',
  })
  async getUserTaskByActor(
    @AppUser() appuser: UserContext,
    @Param() uid: string,
  ) {
    return await this.workflowService.getActorUserTask(appuser, uid);
  }

  /**
   * trigger user task and go to next step
   * @param appuser
   * @param id
   * @param taskId
   * @param data
   * @returns
   */
  @Post('/invoke-task/:taskId')
  @HttpCode(200)
  @ApiResponse({
    status: 200,

    description: 'Success',
  })
  @ApiResponse({
    status: 404,
    description: 'usertask id not found, or not in waiting stage',
  })
  @ApiBody({
    description: 'invoke workflow data, like reason and etc',
    type: Object,
  })
  @ApiOperation({
    operationId: 'invokeWorkflowUserTask',
    description: 'invoke workflow user task',
  })
  async invokeWorkflowUserTask(
    @AppUser() appuser: UserContext,
    @Param('taskId') taskId: string,
    @Body() data: any,
  ) {
    return await this.workflowService.invokeWorkflowUserTask(
      appuser,
      taskId,
      data,
    );
  }

  // change workflow user task like change assignee, candidateUsers/groups
  /**
   * change specific user task assignee, candidatesUsers/groups
   * @param appuser
   * @param id
   * @param taskId
   * @param data
   * @returns
   */
  @Put('/:id/task/:taskId')
  @ApiBody({
    description:
      'update user task assignee: string, candidateUsers:string[], candidateGroups:string[]',
    type: UserTaskActorsApiSchema,
  })
  @ApiOperation({
    operationId: 'updateWorkflowUserTask',
    description: 'update workflow user task',
  })
  async updateWorkflowUserTask(
    @AppUser() appuser: UserContext,
    @Param('id') id: string,
    @Param('taskId') taskId: string,
    @Body() data: UserTaskActors,
  ) {
    return await this.workflowService.updateWorkflowUserTask(
      appuser,
      id,
      taskId,
      data,
    );
  }
  /********************* workflow user task end ***********************/

  /*********************** workflow admin api begin ***********************/
  //done: get all pending workflow processes and its waiting task
  @Get('/admin/get-all-active-process')
  @ApiOperation({
    operationId: 'getAllActiveProcesses',
    description: 'get all active process in this database (done)',
  })
  @ApiResponse({
    status: 200,
    type: [WorkflowProcessApiSchema],
    description: 'Success',
  })
  async getAllActiveProcesses(@AppUser() appuser: UserContext) {
    return await this.workflowService.getAllActiveProcesses(appuser);
  }

  /**
   * obtain input fields expected for specific user task
   * @param appuser
   * @param workflowname
   * @param elementId
   * @returns array of field
   */
  @Get('/user-task-fields/:workflowname/:elementId')
  @ApiOperation({
    operationId: 'getWorkflowUserTaskFormKey',
    description: 'obtain input fields expected for specific user task',
  })
  async getWorkflowUserTaskFormKey(
    @AppUser() appuser: UserContext,
    @Param('workflowname') workflowname: string,
    @Param('elementId') elementId: string,
  ) {
    return await this.workflowService.getWorkflowUserTaskFormKey(
      appuser,
      workflowname,
      elementId,
    );
  }

  //!! not yet
  //get all workflow definitions
  @Get('/admin/definition')
  @ApiOperation({
    operationId: 'getWorkflowDefinitions',
    description: 'list all workflow definitions, **not yet complete**',
  })
  async getWorkflowDefinitions(@AppUser() appuser: UserContext) {
    return await this.workflowService.getWorkflowDefinitions(appuser);
  }

  //!! not yet
  //create new workflow definitions
  @Post('/admin/definition')
  @ApiOperation({
    operationId: 'newWorkflowDefinitions',
    description: 'create new workflow definitions, **not yet complete**',
  })
  @ApiBody({
    description: 'bpmn definitions in xml',
    type: String,
  })
  async newWorkflowDefinitions(
    @AppUser() appuser: UserContext,
    @Param('workflowname') workflowname: WorkflowName,
    @Body() xml: string,
  ) {
    return await this.workflowService.newWorkflowDefinitions(
      appuser,
      workflowname,
      xml,
    );
  }

  //!! **not yet complete**
  //update workflow definition
  @Put('/admin/definition/:workflowname')
  @ApiOperation({
    operationId: 'updateWorkflowDefinition',
    description:
      'update new workflow definitions with new bpmn definition file **not yet complete**',
  })
  @ApiBody({
    description: 'bpmn definition in xml',
    type: String,
  })
  async updateWorkflowDefinition(
    @AppUser() appuser: UserContext,
    @Param('workflowname') workflowname: WorkflowName,
    @Body() xml: string,
  ) {
    return await this.workflowService.updateWorkflowDefinition(
      appuser,
      workflowname,
      xml,
    );
  }

  //!! **not yet complete**
  //read workflow definition
  @Get('/admin/definition/:workflowname')
  @ApiOperation({
    operationId: 'readWorkflowDefinition',
    description:
      'read workflow process definition and svg **not yet complete**',
  })
  async readWorkflowDefinition(
    @AppUser() appuser: UserContext,
    @Param('workflowname') workflowname: WorkflowName,
  ) {
    return await this.workflowService.readWorkflowDefinition(
      appuser,
      workflowname,
    );
  }

  //!! **not yet complete**
  //drop new workflow definitions
  @Delete('/admin/definition/:workflowname')
  @ApiOperation({
    operationId: 'deleteWorkflowDefinition',
    description: 'delete workflow definitions **not yet complete**',
  })
  async dropWorkflowDefinition(
    @AppUser() appuser: UserContext,
    @Param('workflowname') workflowname: WorkflowName,
  ) {
    return await this.workflowService.deleteWorkflowDefinition(
      appuser,
      workflowname,
    );
  }
  /********************* workflow admin api end ***********************/
  /*********************  workflow flow crud begin***********************/

  //search all workflow in this tenant
  @Post('/search-all')
  @HttpCode(200)
  @ApiOperation({
    operationId: 'searchWorkflowProcesses',
    description: 'search all workflow processes',
  })
  @ApiBody({
    description: 'workflow data',
    type: SearchWorkflowProcessApiSchema,
  })
  @ApiResponse({
    status: 200,
    type: [WorkflowProcessApiSchema],
    description: 'Success',
  })
  async searchWorkflows(@AppUser() appuser: UserContext, @Body() filter: any) {
    return await this.workflowService.searchWorkflowProcesses(appuser, filter);
  }

  @Post('/search-active')
  @HttpCode(200)
  @ApiOperation({
    operationId: 'searchRunningWorkflowProcesses',
    description: 'search running workflow processes',
  })
  @ApiBody({
    description: 'workflow data',
    type: SearchWorkflowProcessApiSchema,
  })
  @ApiResponse({
    status: 200,
    type: [WorkflowProcessApiSchema],
    description: 'Success',
  })
  async searchRunningWorkflowProcesses(
    @AppUser() appuser: UserContext,
    @Body() filter: any,
  ) {
    return await this.workflowService.searchRunningWorkflowProcesses(
      appuser,
      filter,
    );
  }

  /**
   * initiate new workflow
   * @param appuser
   * @param workflowname
   * @param data
   * @returns process
   */
  @Post('/:workflowname')
  @ApiBody({
    description: 'workflow data',
    type: Object,
  })
  @ApiOperation({
    operationId: 'startWorkflow',
    description: 'start new workflow process',
  })
  async startWorkflow(
    @AppUser() appuser: UserContext,
    @Param('workflowname') workflowname: WorkflowName,
    @Body() data: any,
  ) {
    return await this.workflowService.startWorkflow(
      appuser,
      workflowname,
      data,
    );
  }

  /**
   * read single workflow process
   * status: done
   * @param appuser
   * @param id
   * @returns workflow
   */
  @Get('/:id')
  @ApiOperation({
    operationId: 'getWorkflowById',
    description: 'get workflow process data and task status',
  })
  async getWorkflowById(
    @AppUser() appuser: UserContext,
    @Param('id') id: string,
  ) {
    return await this.workflowService.getWorkflowById(appuser, id);
  }

  // update workflow seems not require
  // //update single workflow
  // @Put('/:id')
  // @ApiOperation({
  //   operationId: 'updateWorkflowById',
  //   description: 'update specific workflow process',
  // })
  // @ApiBody({
  //   description: 'workflow data',
  //   type: WorkflowDataApiSchema,
  // })
  // @Roles(Role.Everyone)
  // async updateWorkflowById(@AppUser() appuser: UserContext,@Param('id') id: string,@Body() data: any,) {
  //   return await this.workflowService.updateWorkflowById(appuser,id,data);
  // }

  /**
   * delete/cancel single workflow process
   * status: done
   * @param appuser
   * @param id
   * @returns
   */
  @Delete('/:id')
  @ApiOperation({
    operationId: 'deleteWorkflowById',
    description: 'delete specific workflow process',
  })
  async deleteWorkflowById(
    @AppUser() appuser: UserContext,
    @Param('id') id: string,
  ) {
    return await this.workflowService.deleteWorkflowById(appuser, id);
  }

  /********************* workflow flow crud end ***********************/
}
