/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2024-02-23
 * Author: Ks Tan
 */
import { Injectable, Logger } from '@nestjs/common';
import {
  Configuration,
  ModelsDatastore,
  ModelsDatastoreDB,
  DataStore,
  NoCacheManager,
  CacheManager,
  BPMNServer,
} from 'bpmn-server';
import { WorkflowDelegate } from './workflow.delegate';
import { WorkflowUserService } from './workflow.userservice';
let _this: WorkflowConfig; //we need another variable to access WorkflowConfig
class MyDataStore extends DataStore {
  constructor(bpmnserver) {
    super(bpmnserver);
    console.log('this.dbConfiguration ', this.db);
  }
}

@Injectable()
export class WorkflowConfig {
  constructor(
    private workflowdelegate: WorkflowDelegate,
    private workflowUserService: WorkflowUserService,
  ) {
    //inject delegate into config class
  }
  // setServer(server: BPMNServer) {
  //   //this become  Configuration object, use _this instead
  //   _this.workflowdelegate.setServer(server);
  //   _this.workflowUserService.setServer(server)
  //   return _this.workflowdelegate;
  // }
  getConfig() {
    const templatesPath = __dirname + '/emailTemplates/';
    _this = this; //store reference of current object into _this
    const configuration = new Configuration({
      definitionsPath: process.env.BPMN_PATH,
      templatesPath: templatesPath,
      timers: {
        precision: 3000,
      },
      database: {
        MongoDB: {
          db_url: process.env.MONGO_DB_URL,
          // db: process.env.MONGO_DB_NAME, //'bpmn'
        },
        SQLite: { db_connection: '' },
      },

      apiKey: process.env.API_KEY,
      /* Define Server Services */
      logger: function (server) {
        return new Logger();
      },
      definitions: function (server: BPMNServer) {
        return new ModelsDatastore(server);
      },
      appDelegate: (server: BPMNServer) =>
        _this.workflowdelegate.setServer(server),
      //userService: (server: BPMNServer) =>
        //_this.workflowUserService.setServer(server),
      dataStore: function (server: BPMNServer) {
        return new MyDataStore(server);
      },
      cacheManager: function (server: BPMNServer) {
        return new NoCacheManager(server);
      },
    });
    return configuration;
  }
}
