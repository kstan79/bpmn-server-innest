/**
 * This file was automatically generated by simpleapp generator. Every
 * MODIFICATION OVERRIDE BY GENERATEOR
 * last change 2023-10-28
 * Author: Ks Tan
 */
import {
  Controller,
  Get,
  Put,
  Post,
  Delete,
  Body,
  Param,
  Type,
} from '@nestjs/common';
// import { ApiTags, ApiBody, ApiResponse, ApiOperation } from '@nestjs/swagger';
import { UserContext } from '../commons/user.context';
import { SearchBody } from '../types';
const doctype = 'person'.toUpperCase();
type ServiceType = {
  list: Function;
  search: Function;
  create: Function;
  //update: Function;
  //delete: Function;
  findById: Function;
  findIdThenDelete: Function;
  findIdThenUpdate: Function;
  findIdThenPatch: Function;
  setData: Function;
  getAutoComplete: Function;
};

// @ApiTags(doctype)
// @Controller(doctype.toLowerCase())
export class SimpleAppAbstractController<
  TService extends ServiceType,
  TApiSchema,
  T,
> {
  protected service: TService;
  protected tryno: number;
  //   protected apiSchemaClass=

  constructor(service: TService) {
    this.service = service;
  }

  async _list(appuser: UserContext) {
    return this.service.list(appuser);
  }
  async _search(appuser: UserContext, searchObject: SearchBody) {
    return this.service.search(
      appuser,
      searchObject['filter'],
      searchObject['fields'],
      searchObject['sorts'],
    );
  }
  async _autocomplete(appuser: UserContext, keyword: string, data?: T) {
    return this.service.getAutoComplete(appuser, keyword, data);
  }
  async _findOne(appuser: UserContext, id: string) {
    const result = (await this.service.findById(appuser, id)) as TApiSchema;

    return result as Type<TApiSchema>;
  }

  async _create(appuser: UserContext, data: TApiSchema) {
    //const newdata: persontype.Person = { ...data };
    const newdata: T = {} as T; //= { ...data };
    Object.assign(newdata, data); //
    return this.service.create(appuser, newdata) as TApiSchema;
  }

  async _update(appuser: UserContext, id: string, data: TApiSchema) {
    const newdata: T = {} as T; //= { ...data };
    Object.assign(newdata, data); //
    return this.service.findIdThenUpdate(appuser, id, newdata) as TApiSchema;
  }
  async _patch(appuser: UserContext, id: string, data: TApiSchema) {
    const newdata: T = {} as T; //= { ...data };
    Object.assign(newdata, data); //
    return this.service.findIdThenPatch(appuser, id, newdata) as TApiSchema;
  }

  async _delete(appuser: UserContext, id: string) {
    return this.service.findIdThenDelete(appuser, id);
  }
}
